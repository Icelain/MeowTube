package vlc

import "encoding/xml"

func UnmarshalVLCPlaylist(data []byte) (VLCPlaylist, error) {
	var r VLCPlaylist
	err := xml.Unmarshal(data, &r)
	return r, err
}

func (r *VLCPlaylist) Marshal() ([]byte, error) {
	text, err := xml.Marshal(r)
	return []byte(xml.Header + string(text)), err
}

func MarshalFrom(v *VLCPlaylist) ([]byte, error) {
	text, err := xml.MarshalIndent(v, "  ", "    ")
	return []byte(xml.Header + string(text)), err
}

// VLCPlaylist generated by https://www.onlinetool.io/xmltogo/
type VLCPlaylist struct {
	XMLName   xml.Name  `xml:"playlist"`
	Text      string    `xml:",chardata"`
	Xmlns     string    `xml:"xmlns,attr"`
	Vlc       string    `xml:"xmlns:vlc,attr"`
	Version   string    `xml:"version,attr"`
	Title     string    `xml:"title"`
	TrackList TrackList `xml:"trackList"`
	Extension Extension `xml:"extension"`
}

// TrackList generated by https://www.onlinetool.io/xmltogo/
type TrackList struct {
	Text  string  `xml:",chardata"`
	Track []Track `xml:"track"`
}

// Track generated by https://www.onlinetool.io/xmltogo/
type Track struct {
	Text      string         `xml:",chardata"`
	Location  string         `xml:"location"`
	Extension TrackExtension `xml:"extension"`
	Title     string         `xml:"title"`
	Creator   string         `xml:"creator"`
	Duration  string         `xml:"duration"`
}

// TrackExtension generated by https://www.onlinetool.io/xmltogo/
type TrackExtension struct {
	Text        string   `xml:",chardata"`
	Application string   `xml:"application,attr"`
	ID          string   `xml:"vlc:id"`
	Option      []string `xml:"vlc:option"`
}

type Extension struct {
	Text        string          `xml:",chardata"`
	Application string          `xml:"application,attr"`
	Item        []ExtensionItem `xml:"vlc:item"`
}

type ExtensionItem struct {
	Text string `xml:",chardata"`
	Tid  string `xml:"tid,attr"`
}
